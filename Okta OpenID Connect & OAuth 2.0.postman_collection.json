{
	"info": {
		"_postman_id": "d52826c6-a03e-475b-abb5-e2d15f5b5737",
		"name": "Okta OpenID Connect & OAuth 2.0",
		"description": "OAuth 2.0 Protocol APIs\n\nContact Support:\n Name: Okta Developer Team\n Email: devex-public@okta.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38383112",
		"_collection_link": "https://www.postman.com/okta-eng/okta-public-api-collections/collection/bxejig0/okta-openid-connect-oauth-2-0?action=share&source=collection_link&creator=38383112"
	},
	"item": [
		{
			"name": "Dynamic Client Registration",
			"item": [
				{
					"name": "List all Client Applications",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients?after=laborum&limit=20&q=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients"
							],
							"query": [
								{
									"key": "after",
									"value": "laborum",
									"description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](/#pagination) for more information.\n\n> **Note:** The `after` cursor should be treated as an opaque value and obtained through the next link relation."
								},
								{
									"key": "limit",
									"value": "20",
									"description": "A limit on the number of objects to return."
								},
								{
									"key": "q",
									"value": "laborum",
									"description": "Searches the `client_name` property of clients for matching value.\n\n> **Note:** Search currently performs a `startsWith` match, but this is an implementation detail and may change without notice."
								}
							]
						},
						"description": "Lists all the client applications with pagination"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients?after=laborum&limit=20&q=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									],
									"query": [
										{
											"key": "after",
											"value": "laborum"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "q",
											"value": "laborum"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"client_id\": \"B6YnDUIpt6Oq354YYaNR\",\n    \"client_id_issued_at\": 1495059435,\n    \"client_secret_expires_at\": 0,\n    \"client_name\": \"Native client\",\n    \"client_uri\": null,\n    \"logo_uri\": null,\n    \"redirect_uris\": [\n      \"https://httpbin.org/get\"\n    ],\n    \"response_types\": [\n      \"id_token\",\n      \"code\",\n      \"token\"\n    ],\n    \"grant_types\": [\n      \"password\",\n      \"refresh_token\",\n      \"authorization_code\",\n      \"implicit\"\n    ],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"application_type\": \"native\",\n    \"frontchannel_logout_uri\": \"https://example.com/logout\",\n    \"frontchannel_logout_session_required\": false\n  },\n  {\n    \"client_id\": \"etwquEhEjxqyA7HDB8lD\",\n    \"client_id_issued_at\": 1495059868,\n    \"client_secret_expires_at\": 0,\n    \"client_name\": \"Service client\",\n    \"client_uri\": null,\n    \"logo_uri\": null,\n    \"redirect_uris\": [],\n    \"response_types\": [\n      \"token\"\n    ],\n    \"grant_types\": [\n      \"client_credentials\"\n    ],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"application_type\": \"service\",\n    \"frontchannel_logout_uri\": \"https://example.com/logout\",\n    \"frontchannel_logout_session_required\": false\n  },\n  {\n    \"client_id\": \"l3O8MfR0eTVfLJ7jG2UB\",\n    \"client_id_issued_at\": 1495059734,\n    \"client_name\": \"Browser client\",\n    \"client_uri\": null,\n    \"logo_uri\": null,\n    \"redirect_uris\": [\n      \"https://httpbin.org/get\"\n    ],\n    \"response_types\": [\n      \"code\"\n    ],\n    \"grant_types\": [\n      \"authorization_code\"\n    ],\n    \"token_endpoint_auth_method\": \"none\",\n    \"application_type\": \"browser\"\n  },\n  {\n    \"client_id\": \"rHQoApjizqc4MGVlW5En\",\n    \"client_id_issued_at\": 1495059117,\n    \"client_secret_expires_at\": 0,\n    \"client_name\": \"Web client\",\n    \"client_uri\": null,\n    \"logo_uri\": null,\n    \"redirect_uris\": [\n      \"https://www.example.com/oauth2/redirectUri\"\n    ],\n    \"response_types\": [\n      \"code\",\n      \"id_token\",\n      \"token\"\n    ],\n    \"grant_types\": [\n      \"authorization_code\",\n      \"refresh_token\",\n      \"implicit\"\n    ],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"application_type\": \"web\",\n    \"frontchannel_logout_uri\": \"https://example.com/logout\",\n    \"frontchannel_logout_session_required\": false\n  }\n]"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients?after=laborum&limit=20&q=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									],
									"query": [
										{
											"key": "after",
											"value": "laborum"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "q",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients?after=laborum&limit=20&q=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									],
									"query": [
										{
											"key": "after",
											"value": "laborum"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "q",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Register a Client Application",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"code\",\n    \"id_token\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\",\n    \"refresh_token\",\n    \"implicit\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients"
							]
						},
						"description": "Registers a new client application\n\n> **Note:** You can create apps on the Apps endpoint (`/api/v1/apps`) and default to `consent_method=TRUSTED`, while those created with Dynamic Client Registration (`/oauth2/v1/clients`) default to `consent_method=REQUIRED`.\n\n> **Note:** If you want to specify the `client_id` or `client_secret`, you can use Apps API to create or update a client Application.\n\nDifferent Application types have different valid values for the corresponding grant type:\n\n| Application Type  | Valid Grant Type                                                           | Requirements                                   |\n| :---------------- | :------------------------------------------------------------------------- | :--------------------------------------------- |\n| `browser`         | `authorization_code`, `implicit`, `urn:ietf:params:oauth:grant-type:saml2-bearer`. The following grant types are <x-lifecycle class=\"oie\"></x-lifecycle>only : `urn:okta:params:oauth:grant-type:otp`, `urn:okta:params:oauth:grant-type:oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-oob`                                           |                                                |\n| `native`          | `authorization_code`, `implicit`, `password`, `refresh_token`, `urn:ietf:params:oauth:grant-type:saml2-bearer`. The following grant types are <x-lifecycle class=\"oie\"></x-lifecycle>only : `urn:okta:params:oauth:grant-type:otp`, `urn:okta:params:oauth:grant-type:oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-oob`              | Must have at least `authorization_code`        |\n| `service`         | `client_credentials`, `urn:ietf:params:oauth:grant-type:saml2-bearer`. The following grant types are <x-lifecycle class=\"oie\"></x-lifecycle>only : `urn:okta:params:oauth:grant-type:otp`, `urn:okta:params:oauth:grant-type:oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-oob`                                                       | Works with OAuth 2.0 flow (not OpenID Connect) |\n| `web`             | `authorization_code`, `implicit`, `refresh_token`, `client_credentials`(*), `urn:ietf:params:oauth:grant-type:saml2-bearer`. The following grant types are <x-lifecycle class=\"oie\"></x-lifecycle>only : `urn:okta:params:oauth:grant-type:otp`, `urn:okta:params:oauth:grant-type:oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-oob` | Must have at least `authorization_code`        |\n\n> **Note:** The `client_credentials` grant with a web Application type allows you to use one `client_id` for an Application that needs to make user-specific calls and back-end calls for data.\n\n> **Note:** The `grant_types` and `response_types` values described above are partially orthogonal, as they refer to arguments passed to different endpoints in the [OAuth 2.0 protocol](https://tools.ietf.org/html/rfc6749). However, they are related in that the `grant_types` available to a client influence the `response_types` that the client is allowed to use and vice versa. For instance, a `grant_types` value that includes `authorization_code` implies a `response_types` value that includes `code`, as both values are defined as part of the OAuth 2.0 Authorization Code grant."
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"code\",\n    \"id_token\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\",\n    \"refresh_token\",\n    \"implicit\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_secret\": \"5W7XULCEs4BJKnWUXwh8lgmeXRhcGcdViFp84pWe\",\n  \"client_id_issued_at\": 1453913425,\n  \"client_secret_expires_at\": 0,\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\",\n  \"frontchannel_logout_uri\": \"https://example.com/logout\",\n  \"frontchannel_logout_session_required\": false\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"code\",\n    \"id_token\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\",\n    \"refresh_token\",\n    \"implicit\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client_metadata\",\n  \"error_description\": \"client_name: The field cannot be left blank\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"code\",\n    \"id_token\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\",\n    \"refresh_token\",\n    \"implicit\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"code\",\n    \"id_token\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\",\n    \"refresh_token\",\n    \"implicit\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Retrieve a Client application",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "laborum",
									"description": "(Required) `client_id` of the Client application"
								}
							]
						},
						"description": "Retrieves a Client application by `clientId`"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_secret\": \"5W7XULCEs4BJKnWUXwh8lgmeXRhcGcdViFp84pWe\",\n  \"client_id_issued_at\": 1453913425,\n  \"client_secret_expires_at\": 0,\n  \"client_name\": \"Example OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\",\n  \"frontchannel_logout_uri\": \"https://example.com/logout\",\n  \"frontchannel_logout_session_required\": false\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Replace a Client Application",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "laborum",
									"description": "(Required) `client_id` of the Client application"
								}
							]
						},
						"description": "Replaces the settings for a client application.\n\n> **Note:** You must specifiy all settings when you update a client Application. Partial updates aren't supported. If any settings are missing when you update a client application, the update fails. The exceptions are that you can't include `client_secret_expires_at` or `client_id_issued_at` in the request, and you can omit the `client_secret`."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_secret\": \"5W7XULCEs4BJKnWUXwh8lgmeXRhcGcdViFp84pWe\",\n  \"client_id_issued_at\": 1453913425,\n  \"client_secret_expires_at\": 0,\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\",\n  \"frontchannel_logout_uri\": \"https://example.com/logout\",\n  \"frontchannel_logout_session_required\": false\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client_metadata\",\n  \"error_description\": \"client_name: The field cannot be left blank\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Delete a Client Application",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients",
								":clientId"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "laborum",
									"description": "(Required) `client_id` of the Client application"
								}
							]
						},
						"description": "Deletes a client application"
					},
					"response": [
						{
							"name": "No Content",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Generate a new client secret",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId/lifecycle/newSecret",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"clients",
								":clientId",
								"lifecycle",
								"newSecret"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "laborum",
									"description": "(Required) `client_id` of the Client application"
								}
							]
						},
						"description": "Generates a new client secret for the specified client Application.\n\n> **Note:** This operation only applies to client Applications that use the `client_secret_post` or `client_secret_basic` method for token endpoint authorization."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId/lifecycle/newSecret",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId",
										"lifecycle",
										"newSecret"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"client_id\": \"0jrabyQWm4B9zVJPbotY\",\n  \"client_secret\": \"6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc\",\n  \"client_id_issued_at\": 1453913425,\n  \"client_secret_expires_at\": 0,\n  \"client_name\": \"Updated OAuth Client\",\n  \"client_uri\": \"https://www.example.com\",\n  \"logo_uri\": \"https://www.example.com/logo.png\",\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\n    \"https://www.example.com/oauth2/redirectUri\"\n  ],\n  \"post_logout_redirect_uris\": [\n    \"https://www.example.com/oauth2/postLogoutRedirectUri\"\n  ],\n  \"response_types\": [\n    \"id_token\",\n    \"code\"\n  ],\n  \"grant_types\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_method\": \"client_secret_post\",\n  \"initiate_login_uri\": \"https://www.example.com/oauth2/login\",\n  \"frontchannel_logout_uri\": \"https://example.com/logout\",\n  \"frontchannel_logout_session_required\": false\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId/lifecycle/newSecret",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId",
										"lifecycle",
										"newSecret"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId/lifecycle/newSecret",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId",
										"lifecycle",
										"newSecret"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/clients/:clientId/lifecycle/newSecret",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"clients",
										":clientId",
										"lifecycle",
										"newSecret"
									],
									"variable": [
										{
											"key": "clientId",
											"value": "laborum",
											"description": "(Required) `client_id` of the Client application"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				}
			],
			"description": "The Dynamic Client Registration API provides operations to register and manage client Applications for use with Okta's OAuth 2.0 and OpenID Connect endpoints. This API largely follows the contract defined in [RFC7591: OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591) and [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html).\n\n> **Note:** Clients managed through this API are modeled as Applications in Okta and appear in the Applications section of the Admin Console. Changes made through the API appear in the UI and vice versa. Tokens issued by these clients follow the rules for access tokens and ID tokens."
		},
		{
			"name": "Custom Authorization Servers",
			"item": [
				{
					"name": "Retrieve the OAuth 2.0 metadata",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/oauth-authorization-server?client_id=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								".well-known",
								"oauth-authorization-server"
							],
							"query": [
								{
									"key": "client_id",
									"value": "laborum",
									"description": "Clients can be configured to format the issuer differently. Pass in the `client_id` to ensure the returned issuer format matches."
								}
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Returns OAuth 2.0 metadata for the specified Custom Authorization Server. This information can be used by clients to programmatically configure their interactions with Okta. Custom scopes are returned only when they are configured to be publicly discoverable. Custom claims are never returned."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/oauth-authorization-server?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"oauth-authorization-server"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"issuer\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7\",\n  \"authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/authorize\",\n  \"token_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/token\",\n  \"registration_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/clients\",\n  \"jwks_uri\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/keys\",\n  \"response_types_supported\": [\n    \"code\",\n    \"token\",\n    \"id_token\",\n    \"code id_token\",\n    \"code token\",\n    \"id_token token\",\n    \"code id_token token\"\n  ],\n  \"response_modes_supported\": [\n    \"query\",\n    \"fragment\",\n    \"form_post\",\n    \"okta_post_message\"\n  ],\n  \"grant_types_supported\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"password\",\n    \"client_credentials\",\n    \"urn:ietf:params:oauth:grant-type:device_code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"scopes_supported\": [\n    \"okta.myAccount.email.manage\",\n    \"okta.myAccount.email.read\",\n    \"okta.myAccount.manage\",\n    \"okta.myAccount.phone.manage\",\n    \"okta.myAccount.phone.read\",\n    \"okta.myAccount.profile.manage\",\n    \"okta.myAccount.profile.read\",\n    \"okta.myAccount.read\",\n    \"openid\",\n    \"profile\",\n    \"email\",\n    \"address\",\n    \"phone\",\n    \"offline_access\",\n    \"device_sso\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"claims_supported\": [\n    \"ver\",\n    \"jti\",\n    \"iss\",\n    \"aud\",\n    \"iat\",\n    \"exp\",\n    \"cid\",\n    \"uid\",\n    \"scp\",\n    \"sub\"\n  ],\n  \"code_challenge_methods_supported\": [\n    \"S256\"\n  ],\n  \"introspection_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/introspect\",\n  \"introspection_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"revocation_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/revoke\",\n  \"revocation_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"end_session_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/logout\",\n  \"request_parameter_supported\": true,\n  \"request_object_signing_alg_values_supported\": [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n  ],\n  \"device_authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/device/authorize\",\n  \"pushed_authorization_request_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/par\"\n}"
						},
						{
							"name": "Invalid Client ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/oauth-authorization-server?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"oauth-authorization-server"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"invalid_client\",\n  \"errorSummary\": \"Invalid value for 'client_id' parameter.\",\n  \"errorLink\": \"invalid_client\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Authorization Server Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/oauth-authorization-server?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"oauth-authorization-server"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "Retrieve the OpenID Connect metadata",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/openid-configuration?client_id=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								".well-known",
								"openid-configuration"
							],
							"query": [
								{
									"key": "client_id",
									"value": "laborum",
									"description": "Clients can be configured to format the issuer differently. Pass in the `client_id` to ensure the returned issuer format matches."
								}
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Returns OpenID Connect metadata for the specified Custom Authorization Server. This information can be used by clients to programmatically configure their interactions with Okta. Custom scopes are returned only when they are configured to be publicly discoverable. Custom claims are never returned."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/openid-configuration?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"openid-configuration"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"issuer\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7\",\n  \"authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/authorize\",\n  \"token_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/token\",\n  \"userinfo_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/userinfo\",\n  \"registration_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/clients\",\n  \"jwks_uri\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/keys\",\n  \"response_types_supported\": [\n    \"code\",\n    \"id_token\",\n    \"code id_token\",\n    \"code token\",\n    \"id_token token\",\n    \"code id_token token\"\n  ],\n  \"response_modes_supported\": [\n    \"query\",\n    \"fragment\",\n    \"form_post\",\n    \"okta_post_message\"\n  ],\n  \"grant_types_supported\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"password\",\n    \"urn:ietf:params:oauth:grant-type:device_code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"scopes_supported\": [\n    \"okta.myAccount.email.manage\",\n    \"okta.myAccount.email.read\",\n    \"okta.myAccount.manage\",\n    \"okta.myAccount.phone.manage\",\n    \"okta.myAccount.phone.read\",\n    \"okta.myAccount.profile.manage\",\n    \"okta.myAccount.profile.read\",\n    \"okta.myAccount.read\",\n    \"openid\",\n    \"profile\",\n    \"email\",\n    \"address\",\n    \"phone\",\n    \"offline_access\",\n    \"device_sso\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"claims_supported\": [\n    \"iss\",\n    \"ver\",\n    \"sub\",\n    \"aud\",\n    \"iat\",\n    \"exp\",\n    \"jti\",\n    \"auth_time\",\n    \"amr\",\n    \"idp\",\n    \"nonce\",\n    \"name\",\n    \"nickname\",\n    \"preferred_username\",\n    \"given_name\",\n    \"middle_name\",\n    \"family_name\",\n    \"email\",\n    \"email_verified\",\n    \"profile\",\n    \"zoneinfo\",\n    \"locale\",\n    \"address\",\n    \"phone_number\",\n    \"picture\",\n    \"website\",\n    \"gender\",\n    \"birthdate\",\n    \"updated_at\",\n    \"at_hash\",\n    \"c_hash\"\n  ],\n  \"code_challenge_methods_supported\": [\n    \"S256\"\n  ],\n  \"introspection_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/introspect\",\n  \"introspection_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"revocation_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/revoke\",\n  \"revocation_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"end_session_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/logout\",\n  \"request_parameter_supported\": true,\n  \"request_object_signing_alg_values_supported\": [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n  ],\n  \"device_authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/device/authorize\",\n  \"pushed_authorization_request_endpoint\": \"https://{yourOktaDomain}/oauth2/aus59pz16qgMvHvBS0g7/v1/par\"\n}"
						},
						{
							"name": "Invalid Client ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/openid-configuration?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"openid-configuration"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"invalid_client\",\n  \"errorSummary\": \"Invalid value for 'client_id' parameter.\",\n  \"errorLink\": \"invalid_client\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Authorization Server Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/.well-known/openid-configuration?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										".well-known",
										"openid-configuration"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000007\",\n  \"errorSummary\": \"Not found: {0}\",\n  \"errorLink\": \"E0000007\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/authorize",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/authorize?acr_values=urn:okta:loa:1fa:pwd&client_id=laborum&code_challenge=laborum&code_challenge_method=S256&display=laborum&enroll_amr_values=pwd&idp_scope=laborum&idp=laborum&login_hint=laborum&max_age=16307730&nonce=laborum&prompt=login&redirect_uri=laborum&response_type=code id_token&response_mode=fragment&request_uri=laborum&request=laborum&scope=laborum&sessionToken=laborum&state=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"authorize"
							],
							"query": [
								{
									"key": "acr_values",
									"value": "urn:okta:loa:1fa:pwd",
									"description": "An optional parameter that can be included in the authentication request. This parameter increases the level of user assurance.\n\n> **Note:** Multiple space-delimited values may be provided. The authorization server will choose one and reflect the chosen value in any resulting tokens."
								},
								{
									"key": "client_id",
									"value": "laborum",
									"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
								},
								{
									"key": "code_challenge",
									"value": "laborum",
									"description": "A challenge for [PKCE](https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/). The challenge is verified in the access token request."
								},
								{
									"key": "code_challenge_method",
									"value": "S256",
									"description": "Method used to derive the code challenge for [PKCE](https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/)."
								},
								{
									"key": "display",
									"value": "laborum",
									"description": "The `display` parameter to be passed to the Social Identity Provider when performing Social Login."
								},
								{
									"key": "enroll_amr_values",
									"value": "pwd",
									"description": "<div class=\"x-lifecycle-container\"><x-lifecycle class=\"lea\"></x-lifecycle> <x-lifecycle class=\"oie\"></x-lifecycle></div>A space-delimited list of values indicating which authenticators to enroll in.\n\n* If the `enroll_amr_values` parameter is specified, then the value for `prompt` must be `enroll_authenticator`.\n* The parameter value is space delimited, for example, `pwd sms okta_verify` is a valid request parameter value. You are prompted in the order of the amr values provided."
								},
								{
									"key": "idp_scope",
									"value": "laborum",
									"description": "An Okta Extension to the OpenID Specification. A space delimited list of scopes to be provided to the external Identity Provider when performing [Social login](https://developer.okta.com/docs/concepts/identity-providers/). These scopes are used in addition to the scopes already configured on the Identity Provider."
								},
								{
									"key": "idp",
									"value": "laborum",
									"description": "An Okta Extension to the OpenID Specification. The ID of the Identity Provider to use if there's no Okta Session."
								},
								{
									"key": "login_hint",
									"value": "laborum",
									"description": "A username to prepopulate if prompting for authentication."
								},
								{
									"key": "max_age",
									"value": "16307730",
									"description": "Allowable elapsed time, in seconds, since the last time the end user was actively authenticated by Okta."
								},
								{
									"key": "nonce",
									"value": "laborum",
									"description": "A value that is returned in the ID token. It is used to mitigate replay attacks. The value is required for Implicit and Hybrid flows, but optional for Auth Code flows. See [OIDC Specs](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)."
								},
								{
									"key": "prompt",
									"value": "login",
									"description": "If no `prompt` parameter is specified, the standard behavior occurs:\n* If an Okta session already exists and meets the assurance requirements of the app, the user is silently authenticated. Otherwise, the user is prompted to authenticate.\n* If scopes are requested that require consent and consent isn't yet given by the authenticated user, the user is prompted to give consent."
								},
								{
									"key": "redirect_uri",
									"value": "laborum",
									"description": "Callback location where the authorization code or tokens should be sent. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "response_type",
									"value": "code id_token",
									"description": "Any combination of `code`, `token`, and `id_token`. The combination determines the [flow](https://developer.okta.com/docs/concepts/oauth-openid/#recommended-flow-by-application-type)."
								},
								{
									"key": "response_mode",
									"value": "fragment",
									"description": "How the authorization response should be returned. If `id_token` or `token` is specified in the `response_type`, then `query` isn't allowed as a response mode. Defaults to `fragment` in implicit and hybrid flows."
								},
								{
									"key": "request_uri",
									"value": "laborum",
									"description": "Location where the authorization request payload data is referenced in an authorization request to the `/authorize` endpoint. This is returned from a Pushed Authorization Request at the `/par` endpoint."
								},
								{
									"key": "request",
									"value": "laborum",
									"description": "A JWT created by the client that enables requests to be passed as a single, self-contained parameter. See [Parameter details](#parameter-details).\n\n* You must sign the JWT using either the app's client secret or a private key whose public key is registered on the app's JWKSet.\n* The JWT can't be encrypted.\n>  **Note:** See [Build a JWT for client authentication](https://developer.okta.com/docs/guides/build-self-signed-jwt/) for information on how to build a JWT.\n* Okta supports the [HMAC](https://tools.ietf.org/html/rfc7518#section-3.2), [RSA](https://tools.ietf.org/html/rfc7518#section-3.3) and [ECDSA](https://tools.ietf.org/html/rfc7518#section-3.4) signature algorithms. HMAC signatures require that the client has a `token_endpoint_auth_method` that uses a `client_secret`. RSA and ECDSA signatures requires that the client registers a public key.\n* We recommend that you don't duplicate any request parameters in both the JWT and the query URI itself. However, you can do so with `state`, `nonce`, `code_challenge`, and `code_challenge_method`. In those cases, the values in the JWT overrides the query URI values.\n* Okta validates the `request` parameter in the following ways:\n  1. `iss` is required and must be the `client_id`.\n  2. `aud` is required and must be the same value as the Authorization Server issuer that mints the ID or access token. This value is published in the metadata for your Authorization Server.\n  3. JWT lifetime is evaluated using the `iat` and `exp` claims, if present. If the JWT is expired or not yet valid, Okta returns an `invalid_request_object` error. Okta rejects JWTs that expire more than one hour in the future.\n  4. Okta rejects the JWT if the `jti` claim is present and it has already been processed."
								},
								{
									"key": "scope",
									"value": "laborum",
									"description": "A space-delimited string of scopes requested. This includes:\n* The OpenID Connect and OAuth 2.0 reserved scopes: `openid`, `profile`, `email`, `address`, `phone`, `offline_access`, and `groups`\n* The Okta reserved scope `device_sso`\n* Any custom scopes defined in the matching Custom Authorization Server"
								},
								{
									"key": "sessionToken",
									"value": "laborum",
									"description": "Okta one-time session token. This is an Okta extension to the OpenID specification. The `sessionToken` allows an API-based user sign-in flow."
								},
								{
									"key": "state",
									"value": "laborum",
									"description": "A value to be returned with the token. The client application can use it to remember the state of its interaction with the end user at the time of the authentication call. It can contain alphanumeric, comma, period, underscore, and hyphen characters. \n\nOkta requires the OAuth 2.0 `state` parameter on all requests to the `/authorize` endpoint to prevent cross-site request forgery (CSRF).\nThe OAuth 2.0 specification [requires](https://tools.ietf.org/html/rfc6749#section-10.12) that clients protect their redirect URIs against CSRF by sending a value in the authorize request that binds the request to the user-agent's authenticated state.\nUsing the `state` parameter is also a countermeasure to several other known attacks as outlined in [OAuth 2.0 Threat Model and Security Considerations](https://tools.ietf.org/html/rfc6819)."
								}
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "This is a starting point for browser-based OpenID Connect flows such as the implicit and authorization code flows. This request authenticates the user and returns tokens along with an authorization grant to the client application as a part of the callback response.\n\n> **Note:** Requests to the `/authorize` endpoint should redirect the browser (user agent) to the endpoint. You can't use AJAX with this endpoint. Example responses are intentionally omitted, but include displaying a sign-in prompt, redirecting to the client application, or displaying an error."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/authorize?acr_values=urn:okta:loa:1fa:pwd&client_id=laborum&code_challenge=laborum&code_challenge_method=S256&display=laborum&enroll_amr_values=pwd&idp_scope=laborum&idp=laborum&login_hint=laborum&max_age=16307730&nonce=laborum&prompt=login&redirect_uri=laborum&response_type=code id_token&response_mode=fragment&request_uri=laborum&request=laborum&scope=laborum&sessionToken=laborum&state=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"authorize"
									],
									"query": [
										{
											"key": "acr_values",
											"value": "urn:okta:loa:1fa:pwd"
										},
										{
											"key": "client_id",
											"value": "laborum"
										},
										{
											"key": "code_challenge",
											"value": "laborum"
										},
										{
											"key": "code_challenge_method",
											"value": "S256"
										},
										{
											"key": "display",
											"value": "laborum"
										},
										{
											"key": "enroll_amr_values",
											"value": "pwd"
										},
										{
											"key": "idp_scope",
											"value": "laborum"
										},
										{
											"key": "idp",
											"value": "laborum"
										},
										{
											"key": "login_hint",
											"value": "laborum"
										},
										{
											"key": "max_age",
											"value": "16307730"
										},
										{
											"key": "nonce",
											"value": "laborum"
										},
										{
											"key": "prompt",
											"value": "login"
										},
										{
											"key": "redirect_uri",
											"value": "laborum"
										},
										{
											"key": "response_type",
											"value": "code id_token"
										},
										{
											"key": "response_mode",
											"value": "fragment"
										},
										{
											"key": "request_uri",
											"value": "laborum"
										},
										{
											"key": "request",
											"value": "laborum"
										},
										{
											"key": "scope",
											"value": "laborum"
										},
										{
											"key": "sessionToken",
											"value": "laborum"
										},
										{
											"key": "state",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/bc/authorize",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "0jrabyQWm4B9zVJPbotY"
								},
								{
									"key": "client_secret",
									"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
								},
								{
									"key": "scope",
									"value": "openid",
									"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
								},
								{
									"key": "binding_message",
									"value": "Signing in from device",
									"description": "A message that appears for the user to identify the transaction."
								},
								{
									"key": "login_hint",
									"value": "john.doe@example.com",
									"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/bc/authorize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"bc",
								"authorize"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "This endpoint returns a unique identifier (`auth_req_id`) that identifies the authentication flow while it tries to authenticate the user in the background. This `auth_req_id` value is used in subsequent token requests to the `/token` endpoint.\n\n> **Note:** The `/bc/authorize` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"bc",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_req_id\": \"ftJwF5ZwW2SGPPoTQEKtAr_U8_Ek3RvWyR\",\n  \"expires_in\": 300,\n  \"interval\": 5\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"bc",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"Cannot supply multiple client credentials. Use one of the following: credentials in the Authorization header, credentials in the post body, or a client_assertion in the post body.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"bc",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"bc",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/challenge",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mfa_token",
									"value": "Qwk9va6QYgR3s7JMiWUm",
									"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
								},
								{
									"key": "channel_hint",
									"value": "push",
									"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
								},
								{
									"key": "challenge_types_supported",
									"value": "http://auth0.com/oauth/grant-type/mfa-oob",
									"description": "List of direct authentication challenge types supported by the client"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"challenge"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Initiates the challenge of subsequent factor(s) in a Direct Authentication flow after the token endpoint has responded with 'mfa_required'. This endpoint is optional if the client is able to proceed without it, for example, the client knows it needs to follow up with an OTP and can prompt the end user for one.\n\n> **Note:** The `/challenge` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/)."
					},
					"response": [
						{
							"name": "The next factor type to challenge is returned and in the case of out-of-band factors, any information needed for the out-of-band transaction.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"challenge"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"challenge_type\": \"http://auth0.com/oauth/grant-type/mfa-otp\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"challenge"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"'foo' has expired. Use a new 'oob_code' or 'mfa_token' and try again.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"challenge"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client secret supplied for a confidential client is invalid.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"challenge"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"'foo' has expired. Use a new 'oob_code' or 'mfa_token' and try again.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"challenge"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"API call exceeded rate limit due to too many requests.\"\n}"
						}
					]
				},
				{
					"name": "/device/authorize",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "ad deserunt sunt enim",
									"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
								},
								{
									"key": "scope",
									"value": "id occaecat irure",
									"description": "A list of scopes that the client wants included in the access token."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/device/authorize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"device",
								"authorize"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Returns a user code, device code, activation link, and QR code activation link"
					},
					"response": [
						{
							"name": "Based on the type of token and whether it is active, the returned JSON contains a different set of information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"device",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user_code\": \"RGTCFDTL\",\n  \"device_code\": \"5cbeb234-7e00-4ff7-9aa2-b1a4558a75d2\",\n  \"interval\": 5,\n  \"verification_uri_complete\": \"https://{yourOktaDomain}/activate?user_code=RGTCFDTL\",\n  \"verification_uri\": \"https://{yourOktaDomain}/activate\",\n  \"expires_in\": 600\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"device",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_scope\",\n  \"error_description\": \"No scopes were requested.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"device",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"device",
										"authorize"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/introspect",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/introspect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"introspect"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "This endpoint takes an access token, ID token, refresh token, or device secret and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.\n\nBe sure that you are using the `/introspect` endpoint of the same authorization server that you used to create the token.\n\n> **Note:** The `/introspect` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information. For public clients (such as single-page and mobile apps) that don't have a `client_secret`, you must include the `client_id` as a query parameter when calling the `/introspect` endpoint. Make sure that you aren't passing the Authorization header in the request."
					},
					"response": [
						{
							"name": "Based on the type of token and whether it is active, the returned JSON contains a different set of information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"introspect"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"active\": true,\n  \"token_type\": \"Bearer\",\n  \"scope\": \"openid profile\",\n  \"client_id\": \"a9VpZDRCeFh3Nkk2VdYa\",\n  \"username\": \"john.doe@example.com\",\n  \"exp\": 1451606400,\n  \"iat\": 1451602800,\n  \"sub\": \"john.doe@example.com\",\n  \"aud\": \"https://{yourOktaDomain}\",\n  \"iss\": \"https://{yourOktaDomain}/oauth2/orsmsg0aWLdnF3spV0g3\",\n  \"jti\": \"AT.7P4KlczBYVcWLkxduEuKeZfeiNYkZIC9uGJ28Cc-YaI\",\n  \"uid\": \"00uid4BxXw6I6TV4m0g3\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"introspect"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"The `token` parameter is required.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"introspect"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"introspect"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/keys",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/keys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"keys"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Returns a JSON Web Key Set (JWKS) that contains the public keys that can be used to verify the signatures of tokens that you receive from your authorization server.\n\nAny of the two or three keys listed are used to sign tokens. The order of keys in the result doesn't indicate which keys are used.\n\nThese keys can be used to locally validate JWTs returned by Okta. Standard open-source libraries are available for every major language to perform [JWS](https://datatracker.ietf.org/doc/html/rfc7515) signature validation.\n\n> **Note:** The information returned from this endpoint could lag slightly, but will eventually be up-to-date."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/keys",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"keys"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=3832304, must-revalidate",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"keys\": [\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"iKqiD4cr7FZKm6f05K4r-GQOvjRqjOeFmOho9V7SAXYwCyJluaGBLVvDWO1XlduPLOrsG_Wgs67SOG5qeLPR8T1zDK4bfJAo1TvbwYeTwVSfd_0mzRq8WaVc_2JtEK7J-4Z0MdVm_dJmcMHVfDziCRohSZthN__WM2NwGnbewWnla0wpEsU3QMZ05_OxvbBdQZaDUsNSx46is29eCdYwhkAfFd_cFRq3DixLEYUsRwmOqwABwwDjBTNvgZOomrtD8BRFWSTlwsbrNZtJMYU33wuLO9ynFkZnY6qRKVHr3YToIrqNBXw0RWCheTouQ-snfAB6wcE2WDN3N5z760ejqQ\",\n      \"kid\": \"U5R8cHbGw445Qbq8zVO1PcCpXL8yG6IcovVa3laCoxM\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    },\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"l1hZ_g2sgBE3oHvu34T-5XP18FYJWgtul_nRNg-5xra5ySkaXEOJUDRERUG0HrR42uqf9jYrUTwg9fp-SqqNIdHRaN8EwRSDRsKAwK3HIJ2NJfgmrrO2ABkeyUq6rzHxAumiKv1iLFpSawSIiTEBJERtUCDcjbbqyHVFuivIFgH8L37-XDIDb0XG-R8DOoOHLJPTpsgH-rJeM5w96VIRZInsGC5OGWkFdtgk6OkbvVd7_TXcxLCpWeg1vlbmX-0TmG5yjSj7ek05txcpxIqYu-7FIGT0KKvXge_BOSEUlJpBhLKU28OtsOnmc3NLIGXB-GeDiUZiBYQdPR-myB4ZoQ\",\n      \"kid\": \"Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    },\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"lC4ehVB6W0OCtNPnz8udYH9Ao83B6EKnHA5eTcMOap_lQZ-nKtS1lZwBj4wXRVc1XmS0d2OQFA1VMQ-dHLDE3CiGfsGqWbaiZFdW7UGLO1nAwfDdH6xp3xwpKOMewDXbAHJlXdYYAe2ap-CE9c5WLTUBU6JROuWcorHCNJisj1aExyiY5t3JQQVGpBz2oUIHo7NRzQoKimvpdMvMzcYnTlk1dhlG11b1GTkBclprm1BmOP7Ltjd7aEumOJWS67nKcAZzl48Zyg5KtV11V9F9dkGt25qHauqFKL7w3wu-DYhT0hmyFcwn-tXS6e6HQbfHhR_MQxysLtDGOk2ViWv8AQ\",\n      \"kid\": \"h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    }\n  ]\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/keys",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"keys"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/logout",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/logout?id_token_hint=laborum&post_logout_redirect_uri=laborum&state=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"logout"
							],
							"query": [
								{
									"key": "id_token_hint",
									"value": "laborum",
									"description": "(Required) A valid ID token with a subject that matches the current session."
								},
								{
									"key": "post_logout_redirect_uri",
									"value": "laborum",
									"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "state",
									"value": "laborum",
									"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow"
								}
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Use this operation to sign a user out by removing their Okta browser session.\n\nThis endpoint takes an ID token and logs the user out of Okta if the subject matches the current Okta session. A `post_logout_redirect_uri` may be specified to redirect the browser after the logout is performed. Otherwise, the browser is redirected to the Okta sign-in page. See [Sign users](https://developer.okta.com/docs/guides/sign-users-out/) out for more information.\n\nIf no Okta session exists, this endpoint has no effect and the browser is redirected immediately to the Okta sign-in page or the `post_logout_redirect_uri` (if specified).\n\n> **Note:** Requests to the `/logout` endpoint should redirect the browser (user agent) to the endpoint. You can't use AJAX with this endpoint. We may load an interstitial to do client-side logic before finally redirecting to the `post_logout_redirect_uri` or sign-in page if no redirect is provided."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/logout?id_token_hint=laborum&post_logout_redirect_uri=laborum&state=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"logout"
									],
									"query": [
										{
											"key": "id_token_hint",
											"value": "laborum"
										},
										{
											"key": "post_logout_redirect_uri",
											"value": "laborum"
										},
										{
											"key": "state",
											"value": "laborum"
										}
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/logout",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id_token_hint",
									"value": "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwM3VkaXR1ZGUubmV0IiwiZW1haWxf.....dmVyjoiaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGVzbpJhGM91PqJwi_AylE6rp-ehamfnUAO4JL14PkemF45Pn3u_6KayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg",
									"description": "A valid ID token with a subject that matches the current session"
								},
								{
									"key": "post_logout_redirect_uri",
									"value": "https://www.example.com/oauth2/postLogoutRedirectUri",
									"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "state",
									"value": "1230000",
									"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Use this operation to sign a user out by removing their Okta browser session. This is the recommended method over GET as you can wrap the parameters in the request body.\n\nThis endpoint uses the ID token to verify that the subject matches the current Okta session, and then signs the user. You can specify a `post_logout_redirect_uri` to redirect the browser after the user is signs out. Otherwise, the browser is redirected to the Okta sign-in page. See [Sign users out](https://developer.okta.com/docs/guides/sign-users-out/).\n\nIf no Okta session exists, this endpoint has no effect and the browser is redirected immediately to the Okta sign-in page or the `post_logout_redirect_uri` (if specified).\n\n> **Note:** When making requests to the `/logout` endpoint, the browser (user agent) should be redirected to the endpoint. You need to make a POST request from a form. A POST request to this endpoint from the backend doesn't completely terminate the session."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token_hint",
											"value": "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwM3VkaXR1ZGUubmV0IiwiZW1haWxf.....dmVyjoiaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGVzbpJhGM91PqJwi_AylE6rp-ehamfnUAO4JL14PkemF45Pn3u_6KayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg",
											"description": "A valid ID token with a subject that matches the current session"
										},
										{
											"key": "post_logout_redirect_uri",
											"value": "https://www.example.com/oauth2/postLogoutRedirectUri",
											"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
										},
										{
											"key": "state",
											"value": "1230000",
											"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"logout"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/oob-authenticate",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login_hint",
									"value": "testuser@example.com",
									"description": "(Required) The user sign-in information for whom authentication is being requested"
								},
								{
									"key": "channel_hint",
									"value": "push",
									"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"oob-authenticate"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Initiates Direct Authentication with an out-of-band authenticator\n\n> **Note:** The `/oob-authenticate` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/)."
					},
					"response": [
						{
							"name": "Out-of-band authentication has successfully been initiated.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"oob-authenticate"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"oob_code\": \"ftOpMH6ohWMGWoH1vgrX-lNX6tnXE6JNd9\",\n  \"channel\": \"push\",\n  \"binding_method\": \"none\",\n  \"expires_in\": 300,\n  \"interval\": 5\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"oob-authenticate"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"'foo' is not supported as a 'channel_hint'. Try again with another value.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"oob-authenticate"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client secret supplied for a confidential client is invalid.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"oob-authenticate"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"The required authenticator cannot be used. Check if it is required by policy and the user is enrolled in the authenticator and try again.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"oob-authenticate"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"API call exceeded rate limit due to too many requests.\"\n}"
						}
					]
				},
				{
					"name": "/par",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "example.okta.com"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"par"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Use this operation to request the permitted communication options for the `/par` operation.\n\n> **Note:** CORS is enforced on a per-client basis. This endpoint will always return CORS headers with the current Origin."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "example.okta.com",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST",
									"description": ""
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "tempor qui dolor consectet",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Origin",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/par",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"par"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "The pushed authorization request endpoint (`/par`) promotes OAuth security by allowing the authorization server to authenticate the client before any user interaction happens. The increased confidence in the client's identity during the authorization process means the authorization server can refuse illegitimate requests much earlier in the process. This process prevents attempts to spoof clients or otherwise tamper with or misuse an authorization request and provides a simple way to make a confidential and integrity-protected authorization request.\n\nThe `/par` endpoint allows an OAuth 2.0 client to push the payload of an authorization request directly to the authorization server. The authorization server provides a `request_uri` value in the response that can be used as a reference to the authorization request payload data in a subsequent call to the `/authorize` endpoint through a user agent."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"request_uri\": \"urn:okta:Y1hIQ3ZqYjFodEZMOVJ3TUF4ZHRPZjJuNFZRV2ZWQ044MmFoX2VIT2oyNDo\",\n  \"expires_in\": 3600\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_scope\",\n  \"error_description\": \"No scopes were requested.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Invalid value for client_id' parameter.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"Requests for ID tokens or access tokens with OpenID scopes require the 'openid' scope.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"par"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/revoke",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/revoke",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"revoke"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "The API takes an access or refresh token and revokes it. Revoked tokens are considered inactive at the introspection endpoint. A client may only revoke its own tokens. See [Revoke tokens](https://developer.okta.com/docs/guides/revoke-tokens/) for more information.\n\n> **Note:** The `/revoke` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "A successful revocation is denoted by an HTTP 200 OK response. Note that revoking an invalid, expired, or revoked token is still considered a success so as to not leak information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"revoke"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"revoke"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"The `token` parameter is required.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"revoke"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"revoke"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/token",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "example.okta.com"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"token"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Use this operation to request the permitted communication options for the `/token` operation.\n\n> **Note:** CORS is enforced on a per-client basis. This endpoint will always return CORS headers with the current Origin."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "example.okta.com",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST",
									"description": ""
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "tempor qui dolor consectet",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Origin",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/token",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "0jrabyQWm4B9zVJPbotY"
								},
								{
									"key": "client_secret",
									"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
								},
								{
									"key": "redirect_uri",
									"value": "https://www.example.com/oauth2/redirectUri"
								},
								{
									"key": "code",
									"value": "QnowT-aeawtOJKp-MtkH&"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"token"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "This endpoint returns access tokens, ID tokens, and refresh tokens depending on the request parameters. For password, client credentials, saml2 assertion, and refresh token flows, calling `/token` is the only step of the flow. For the authorization code flow, calling `/token` is the second step of the flow.\n\n> **Note:** The `/token` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "Based on the scopes requested. Generally speaking, the scopes specified in a request are included in the access token in the response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiJ9.eyJ2ZXIiOjEsImlzcyI6Imh0dHA6Ly9yYWluLm9rdGExLmNvbToxODAyIiwiaWF0IjoxNDQ5NjI0MDI2LCJleHAiOjE0NDk2Mjc2MjYsImp0aSI6IlVmU0lURzZCVVNfdHA3N21BTjJxIiwic2NvcGVzIjpbIm9wZW5pZCIsImVtYWlsIl0sImNsaWVudF9pZCI6InVBYXVub2ZXa2FESnh1a0NGZUJ4IiwidXNlcl9pZCI6IjAwdWlkNEJ4WHc2STZUVjRtMGczIn0.HaBu5oQxdVCIvea88HPgr2O5evqZlCT4UXH4UKhJnZ5px-ArNRqwhxXWhHJisslswjPpMkx1IgrudQIjzGYbtLFjrrg2ueiU5-YfmKuJuD6O2yPWGTsV7X6i7ABT6P-t8PRz_RNbk-U1GXWIEkNnEWbPqYDAm_Ofh7iW0Y8WDA5ez1jbtMvd-oXMvJLctRiACrTMLJQ2e5HkbUFxgXQ_rFPNHJbNSUBDLqdi2rg_ND64DLRlXRY7hupNsvWGo0gF4WEUk8IZeaLjKw8UoIs-ETEwJlAMcvkhoVVOsN5dPAaEKvbyvPC1hUGXb4uuThlwdD3ECJrtwgKqLqcWonNtiw\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"openid email offline_access\",\n  \"refresh_token\": \"a9VpZDRCeFh3Nkk2VdY\",\n  \"id_token\": \"eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwMHVpZDRCeFh3Nkk2VFY0bTBnMyIsImVtYWlsIjoid2VibWFzdGVyQGNsb3VkaXR1ZGUubmV0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInZlciI6MSwiaXNzIjoiaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGV3RGZWUiIsImF1dGhfdGltZSI6MTQ0OTYyNDAyNiwiYXRfaGFzaCI6ImNwcUtmZFFBNWVIODkxRmY1b0pyX1EifQ.Btw6bUbZhRa89DsBb8KmL9rfhku--_mbNC2pgC8yu8obJnwO12nFBepui9KzbpJhGM91PqJwi_AylE6rp-ehamfnUAO4JL14PkemF45Pn3u_6KKwxJnxcWxLvMuuisnvIs7NScKpOAab6ayZU0VL8W6XAijQmnYTtMWQfSuaaR8rYOaWHrffh3OypvDdrQuYacbkT0csxdrayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"The authorization code is invalid or has expired.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"token"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/userinfo",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "address device_sso email groups offline_access okta.clients.manage okta.clients.read okta.clients.register okta.universalLogout.manage okta.workflows.invoke.manage openid phone profile",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "/oauth2/v1/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "/oauth2/v1/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/userinfo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								":authorizationServerId",
								"v1",
								"userinfo"
							],
							"variable": [
								{
									"key": "authorizationServerId",
									"value": "laborum",
									"description": "(Required) `id` of the Authorization Server"
								}
							]
						},
						"description": "Returns information about the user that is the subject of the access token. Many of these claims are also included in the [ID token](https://developer.okta.com/docs/reference/api/oidc/#id-token), but calling this endpoint always returns all of the user's claims. The ID token can be configured to include a subset of the user's claims. See [Scope-dependent claims](https://developer.okta.com/docs/reference/api/oidc/#scope-dependent-claims-not-always-returned) for more information."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"userinfo"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"sub\": \"00uid4BxXw6I6TV4m0g3\",\n  \"name\": \"John Doe\",\n  \"nickname\": \"Jimmy\",\n  \"given_name\": \"John\",\n  \"middle_name\": \"James\",\n  \"family_name\": \"Doe\",\n  \"profile\": \"https://example.com/john.doe\",\n  \"zoneinfo\": \"America/Los_Angeles\",\n  \"locale\": \"en-US\",\n  \"updated_at\": 1311280970,\n  \"email\": \"john.doe@example.com\",\n  \"email_verified\": true,\n  \"address\": {\n    \"street_address\": \"123 Hollywood Blvd.\",\n    \"locality\": \"Los Angeles\",\n    \"region\": \"CA\",\n    \"postal_code\": \"90210\",\n    \"country\": \"US\"\n  },\n  \"phone_number\": \"+1 (425) 555-1212\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"userinfo"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "WWW-Authenticate",
									"value": "Bearer error=\"invalid_token\", error_description=\"The access token is invalid\"",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"userinfo"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "WWW-Authenticate",
									"value": "Bearer error=\"insufficient_scope\", error_description=\"The access token must provide access to at least one of these scopes - profile, email, address or phone\"",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/:authorizationServerId/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										":authorizationServerId",
										"v1",
										"userinfo"
									],
									"variable": [
										{
											"key": "authorizationServerId",
											"value": "laborum",
											"description": "(Required) `id` of the Authorization Server"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				}
			],
			"description": "You use a Custom Authorization Server to create and apply authorization policies to secure your APIs. An access token that is minted by a Custom Authorization Server is consumed by your APIs.\n\nOkta allows you to [create multiple Custom Authorization Servers](https://developer.okta.com/docs/guides/customize-authz-server/main/#create-an-authorization-server) within a single Okta org that you can use to protect your own resource servers. Within each authorization server, you can define your own custom OAuth 2.0 scopes, claims, and access policies to support authorization for your APIs."
		},
		{
			"name": "Global Token Revocation",
			"item": [
				{
					"name": "Initiate the global revocation of all tokens and sessions",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sub_id\": {\n    \"format\": \"opaque\",\n    \"id\": \"00u1dnq5S0CfjlkpABCD\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/global-token-revocation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"global-token-revocation"
							]
						},
						"description": "Initiates the global revocation of all tokens and sessions for a specified user enabling external Identity Providers to trigger a comprehensive sign-out process. This includes executing IdP-initiated sign-out flows across all applications that are using global token revocation and requiring users to re-authenticate to access protected resources."
					},
					"response": [
						{
							"name": "No Content",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sub_id\": {\n    \"format\": \"opaque\",\n    \"id\": \"00u1dnq5S0CfjlkpABCD\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/global-token-revocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"global-token-revocation"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sub_id\": {\n    \"format\": \"opaque\",\n    \"id\": \"00u1dnq5S0CfjlkpABCD\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/global-token-revocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"global-token-revocation"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sub_id\": {\n    \"format\": \"opaque\",\n    \"id\": \"00u1dnq5S0CfjlkpABCD\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/global-token-revocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"global-token-revocation"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000006\",\n  \"errorSummary\": \"You do not have permission to perform the requested action\",\n  \"errorLink\": \"E0000006\",\n  \"errorId\": \"sampleNUSD_8fdkFd8fs8SDBK\",\n  \"errorCauses\": []\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "SSWS {{apiToken}}",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sub_id\": {\n    \"format\": \"opaque\",\n    \"id\": \"00u1dnq5S0CfjlkpABCD\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/global-token-revocation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"global-token-revocation"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				}
			],
			"description": "The Global Token Revocation API provides a comprehensive solution for managing security across multiple applications and services. This API extends beyond the standard OAuth 2.0 token revocation, enabling the revocation of SSWS tokens and facilitating IdP-initiated sign-out processes."
		},
		{
			"name": "Org Authorization Server",
			"item": [
				{
					"name": "Retrieve the OpenID Connect metadata",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/.well-known/openid-configuration?client_id=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							],
							"query": [
								{
									"key": "client_id",
									"value": "laborum",
									"description": "Clients can be configured to format the issuer differently. Pass in the `client_id` to ensure the returned issuer format matches."
								}
							]
						},
						"description": "Returns OpenID Connect metadata for the Org Authorization Server. This information can be used by clients to programmatically configure their interactions with Okta. Custom scopes are returned only when they are configured to be publicly discoverable. Custom claims are never returned."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/.well-known/openid-configuration?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"issuer\": \"https://{yourOktaDomain}\",\n  \"authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/authorize\",\n  \"token_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/token\",\n  \"userinfo_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/userinfo\",\n  \"registration_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/clients\",\n  \"jwks_uri\": \"https://{yourOktaDomain}/oauth2/v1/keys\",\n  \"response_types_supported\": [\n    \"code\",\n    \"id_token\",\n    \"code id_token\",\n    \"code token\",\n    \"id_token token\",\n    \"code id_token token\"\n  ],\n  \"response_modes_supported\": [\n    \"query\",\n    \"fragment\",\n    \"form_post\",\n    \"okta_post_message\"\n  ],\n  \"grant_types_supported\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"password\",\n    \"urn:ietf:params:oauth:grant-type:device_code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"scopes_supported\": [\n    \"openid\",\n    \"email\",\n    \"profile\",\n    \"address\",\n    \"phone\",\n    \"offline_access\",\n    \"groups\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"claims_supported\": [\n    \"iss\",\n    \"ver\",\n    \"sub\",\n    \"aud\",\n    \"iat\",\n    \"exp\",\n    \"jti\",\n    \"auth_time\",\n    \"amr\",\n    \"idp\",\n    \"nonce\",\n    \"name\",\n    \"nickname\",\n    \"preferred_username\",\n    \"given_name\",\n    \"middle_name\",\n    \"family_name\",\n    \"email\",\n    \"email_verified\",\n    \"profile\",\n    \"zoneinfo\",\n    \"locale\",\n    \"address\",\n    \"phone_number\",\n    \"picture\",\n    \"website\",\n    \"gender\",\n    \"birthdate\",\n    \"updated_at\",\n    \"at_hash\",\n    \"c_hash\"\n  ],\n  \"code_challenge_methods_supported\": [\n    \"S256\"\n  ],\n  \"introspection_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/introspect\",\n  \"introspection_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"revocation_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/revoke\",\n  \"revocation_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"client_secret_jwt\",\n    \"private_key_jwt\",\n    \"none\"\n  ],\n  \"end_session_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/logout\",\n  \"request_parameter_supported\": true,\n  \"request_object_signing_alg_values_supported\": [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n  ],\n  \"device_authorization_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/device/authorize\",\n  \"pushed_authorization_request_endpoint\": \"https://{yourOktaDomain}/oauth2/v1/par\"\n}"
						},
						{
							"name": "Invalid Client ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/.well-known/openid-configuration?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"invalid_client\",\n  \"errorSummary\": \"Invalid value for 'client_id' parameter.\",\n  \"errorLink\": \"invalid_client\",\n  \"errorId\": \"sampleMlLvGUj_YD5v16vkYWY\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/authorize",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/authorize?acr_values=urn:okta:loa:1fa:pwd&client_id=laborum&code_challenge=laborum&code_challenge_method=S256&display=laborum&enroll_amr_values=pwd&idp_scope=laborum&idp=laborum&login_hint=laborum&max_age=16307730&nonce=laborum&prompt=login&redirect_uri=laborum&response_type=code id_token&response_mode=fragment&request_uri=laborum&request=laborum&scope=laborum&sessionToken=laborum&state=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"authorize"
							],
							"query": [
								{
									"key": "acr_values",
									"value": "urn:okta:loa:1fa:pwd",
									"description": "An optional parameter that can be included in the authentication request. This parameter increases the level of user assurance.\n\n> **Note:** Multiple space-delimited values may be provided. The authorization server will choose one and reflect the chosen value in any resulting tokens."
								},
								{
									"key": "client_id",
									"value": "laborum",
									"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
								},
								{
									"key": "code_challenge",
									"value": "laborum",
									"description": "A challenge for [PKCE](https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/). The challenge is verified in the access token request."
								},
								{
									"key": "code_challenge_method",
									"value": "S256",
									"description": "Method used to derive the code challenge for [PKCE](https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/)."
								},
								{
									"key": "display",
									"value": "laborum",
									"description": "The `display` parameter to be passed to the Social Identity Provider when performing Social Login."
								},
								{
									"key": "enroll_amr_values",
									"value": "pwd",
									"description": "<div class=\"x-lifecycle-container\"><x-lifecycle class=\"lea\"></x-lifecycle> <x-lifecycle class=\"oie\"></x-lifecycle></div>A space-delimited list of values indicating which authenticators to enroll in.\n\n* If the `enroll_amr_values` parameter is specified, then the value for `prompt` must be `enroll_authenticator`.\n* The parameter value is space delimited, for example, `pwd sms okta_verify` is a valid request parameter value. You are prompted in the order of the amr values provided."
								},
								{
									"key": "idp_scope",
									"value": "laborum",
									"description": "An Okta Extension to the OpenID Specification. A space delimited list of scopes to be provided to the external Identity Provider when performing [Social login](https://developer.okta.com/docs/concepts/identity-providers/). These scopes are used in addition to the scopes already configured on the Identity Provider."
								},
								{
									"key": "idp",
									"value": "laborum",
									"description": "An Okta Extension to the OpenID Specification. The ID of the Identity Provider to use if there's no Okta Session."
								},
								{
									"key": "login_hint",
									"value": "laborum",
									"description": "A username to prepopulate if prompting for authentication."
								},
								{
									"key": "max_age",
									"value": "16307730",
									"description": "Allowable elapsed time, in seconds, since the last time the end user was actively authenticated by Okta."
								},
								{
									"key": "nonce",
									"value": "laborum",
									"description": "A value that is returned in the ID token. It is used to mitigate replay attacks. The value is required for Implicit and Hybrid flows, but optional for Auth Code flows. See [OIDC Specs](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)."
								},
								{
									"key": "prompt",
									"value": "login",
									"description": "If no `prompt` parameter is specified, the standard behavior occurs:\n* If an Okta session already exists and meets the assurance requirements of the app, the user is silently authenticated. Otherwise, the user is prompted to authenticate.\n* If scopes are requested that require consent and consent isn't yet given by the authenticated user, the user is prompted to give consent."
								},
								{
									"key": "redirect_uri",
									"value": "laborum",
									"description": "Callback location where the authorization code or tokens should be sent. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "response_type",
									"value": "code id_token",
									"description": "Any combination of `code`, `token`, and `id_token`. The combination determines the [flow](https://developer.okta.com/docs/concepts/oauth-openid/#recommended-flow-by-application-type)."
								},
								{
									"key": "response_mode",
									"value": "fragment",
									"description": "How the authorization response should be returned. If `id_token` or `token` is specified in the `response_type`, then `query` isn't allowed as a response mode. Defaults to `fragment` in implicit and hybrid flows."
								},
								{
									"key": "request_uri",
									"value": "laborum",
									"description": "Location where the authorization request payload data is referenced in an authorization request to the `/authorize` endpoint. This is returned from a Pushed Authorization Request at the `/par` endpoint."
								},
								{
									"key": "request",
									"value": "laborum",
									"description": "A JWT created by the client that enables requests to be passed as a single, self-contained parameter. See [Parameter details](#parameter-details).\n\n* You must sign the JWT using either the app's client secret or a private key whose public key is registered on the app's JWKSet.\n* The JWT can't be encrypted.\n>  **Note:** See [Build a JWT for client authentication](https://developer.okta.com/docs/guides/build-self-signed-jwt/) for information on how to build a JWT.\n* Okta supports the [HMAC](https://tools.ietf.org/html/rfc7518#section-3.2), [RSA](https://tools.ietf.org/html/rfc7518#section-3.3) and [ECDSA](https://tools.ietf.org/html/rfc7518#section-3.4) signature algorithms. HMAC signatures require that the client has a `token_endpoint_auth_method` that uses a `client_secret`. RSA and ECDSA signatures requires that the client registers a public key.\n* We recommend that you don't duplicate any request parameters in both the JWT and the query URI itself. However, you can do so with `state`, `nonce`, `code_challenge`, and `code_challenge_method`. In those cases, the values in the JWT overrides the query URI values.\n* Okta validates the `request` parameter in the following ways:\n  1. `iss` is required and must be the `client_id`.\n  2. `aud` is required and must be the same value as the Authorization Server issuer that mints the ID or access token. This value is published in the metadata for your Authorization Server.\n  3. JWT lifetime is evaluated using the `iat` and `exp` claims, if present. If the JWT is expired or not yet valid, Okta returns an `invalid_request_object` error. Okta rejects JWTs that expire more than one hour in the future.\n  4. Okta rejects the JWT if the `jti` claim is present and it has already been processed."
								},
								{
									"key": "scope",
									"value": "laborum",
									"description": "A space-delimited string of scopes requested. This includes:\n* The OpenID Connect and OAuth 2.0 reserved scopes: `openid`, `profile`, `email`, `address`, `phone`, `offline_access`, and `groups`\n* The Okta reserved scope `device_sso`\n* Any custom scopes defined in the matching Custom Authorization Server"
								},
								{
									"key": "sessionToken",
									"value": "laborum",
									"description": "Okta one-time session token. This is an Okta extension to the OpenID specification. The `sessionToken` allows an API-based user sign-in flow."
								},
								{
									"key": "state",
									"value": "laborum",
									"description": "A value to be returned with the token. The client application can use it to remember the state of its interaction with the end user at the time of the authentication call. It can contain alphanumeric, comma, period, underscore, and hyphen characters. \n\nOkta requires the OAuth 2.0 `state` parameter on all requests to the `/authorize` endpoint to prevent cross-site request forgery (CSRF).\nThe OAuth 2.0 specification [requires](https://tools.ietf.org/html/rfc6749#section-10.12) that clients protect their redirect URIs against CSRF by sending a value in the authorize request that binds the request to the user-agent's authenticated state.\nUsing the `state` parameter is also a countermeasure to several other known attacks as outlined in [OAuth 2.0 Threat Model and Security Considerations](https://tools.ietf.org/html/rfc6819)."
								}
							]
						},
						"description": "This is a starting point for browser-based OpenID Connect flows such as the implicit and authorization code flows. This request authenticates the user and returns tokens along with an authorization grant to the client application as a part of the callback response.\n\n> **Note:** Requests to the `/authorize` endpoint should redirect the browser (user agent) to the endpoint. You can't use AJAX with this endpoint. Example responses are intentionally omitted, but include displaying a sign-in prompt, redirecting to the client application, or displaying an error."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/authorize?acr_values=urn:okta:loa:1fa:pwd&client_id=laborum&code_challenge=laborum&code_challenge_method=S256&display=laborum&enroll_amr_values=pwd&idp_scope=laborum&idp=laborum&login_hint=laborum&max_age=16307730&nonce=laborum&prompt=login&redirect_uri=laborum&response_type=code id_token&response_mode=fragment&request_uri=laborum&request=laborum&scope=laborum&sessionToken=laborum&state=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"authorize"
									],
									"query": [
										{
											"key": "acr_values",
											"value": "urn:okta:loa:1fa:pwd"
										},
										{
											"key": "client_id",
											"value": "laborum"
										},
										{
											"key": "code_challenge",
											"value": "laborum"
										},
										{
											"key": "code_challenge_method",
											"value": "S256"
										},
										{
											"key": "display",
											"value": "laborum"
										},
										{
											"key": "enroll_amr_values",
											"value": "pwd"
										},
										{
											"key": "idp_scope",
											"value": "laborum"
										},
										{
											"key": "idp",
											"value": "laborum"
										},
										{
											"key": "login_hint",
											"value": "laborum"
										},
										{
											"key": "max_age",
											"value": "16307730"
										},
										{
											"key": "nonce",
											"value": "laborum"
										},
										{
											"key": "prompt",
											"value": "login"
										},
										{
											"key": "redirect_uri",
											"value": "laborum"
										},
										{
											"key": "response_type",
											"value": "code id_token"
										},
										{
											"key": "response_mode",
											"value": "fragment"
										},
										{
											"key": "request_uri",
											"value": "laborum"
										},
										{
											"key": "request",
											"value": "laborum"
										},
										{
											"key": "scope",
											"value": "laborum"
										},
										{
											"key": "sessionToken",
											"value": "laborum"
										},
										{
											"key": "state",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/bc/authorize",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "0jrabyQWm4B9zVJPbotY"
								},
								{
									"key": "client_secret",
									"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
								},
								{
									"key": "scope",
									"value": "openid",
									"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
								},
								{
									"key": "binding_message",
									"value": "Signing in from device",
									"description": "A message that appears for the user to identify the transaction."
								},
								{
									"key": "login_hint",
									"value": "john.doe@example.com",
									"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/bc/authorize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"bc",
								"authorize"
							]
						},
						"description": "This endpoint returns a unique identifier (`auth_req_id`) that identifies the authentication flow while it tries to authenticate the user in the background. This `auth_req_id` value is used in subsequent token requests to the `/token` endpoint.\n\n> **Note:** The `/bc/authorize` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"bc",
										"authorize"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_req_id\": \"ftJwF5ZwW2SGPPoTQEKtAr_U8_Ek3RvWyR\",\n  \"expires_in\": 300,\n  \"interval\": 5\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"bc",
										"authorize"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"Cannot supply multiple client credentials. Use one of the following: credentials in the Authorization header, credentials in the post body, or a client_assertion in the post body.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"bc",
										"authorize"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "scope",
											"value": "openid",
											"description": "(Required) `openid` is required for authentication requests. You can also include other scopes."
										},
										{
											"key": "binding_message",
											"value": "Signing in from device",
											"description": "A message that appears for the user to identify the transaction."
										},
										{
											"key": "login_hint",
											"value": "john.doe@example.com",
											"description": "A hint to the OpenID Provider regarding the user for whom authentication is being requested.\n\n**Note:** You can specify either `login_hint` or `id_token_hint` in the authentication request, not both."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/bc/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"bc",
										"authorize"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/challenge",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mfa_token",
									"value": "Qwk9va6QYgR3s7JMiWUm",
									"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
								},
								{
									"key": "channel_hint",
									"value": "push",
									"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
								},
								{
									"key": "challenge_types_supported",
									"value": "http://auth0.com/oauth/grant-type/mfa-oob",
									"description": "List of direct authentication challenge types supported by the client"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/challenge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"challenge"
							]
						},
						"description": "Initiates the challenge of subsequent factor(s) in a Direct Authentication flow after the token endpoint has responded with 'mfa_required'. This endpoint is optional if the client is able to proceed without it, for example, when the client knows it needs to follow up with an OTP and can prompt the end user for one.\n\n> **Note:** The `/challenge` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/)."
					},
					"response": [
						{
							"name": "The next factor type to challenge is returned and in the case of out-of-band factors, any information needed for the out-of-band transaction.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"challenge"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"challenge_type\": \"http://auth0.com/oauth/grant-type/mfa-otp\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"challenge"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"'foo' has expired. Use a new 'oob_code' or 'mfa_token' and try again.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"challenge"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client secret supplied for a confidential client is invalid.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"challenge"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"'foo' has expired. Use a new 'oob_code' or 'mfa_token' and try again.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "mfa_token",
											"value": "Qwk9va6QYgR3s7JMiWUm",
											"description": "(Required) The value returned from a previous token or challenge request for identifying the multifactor transaction across multiple requests"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										},
										{
											"key": "challenge_types_supported",
											"value": "http://auth0.com/oauth/grant-type/mfa-oob",
											"description": "List of direct authentication challenge types supported by the client"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/challenge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"challenge"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"API call exceeded rate limit due to too many requests.\"\n}"
						}
					]
				},
				{
					"name": "/device/authorize",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "ad deserunt sunt enim",
									"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
								},
								{
									"key": "scope",
									"value": "id occaecat irure",
									"description": "A list of scopes that the client wants included in the access token."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/device/authorize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"device",
								"authorize"
							]
						},
						"description": "Returns a user code, device code, activation link, and QR code activation link"
					},
					"response": [
						{
							"name": "Based on the type of token and whether it is active, the returned JSON contains a different set of information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"device",
										"authorize"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user_code\": \"RGTCFDTL\",\n  \"device_code\": \"5cbeb234-7e00-4ff7-9aa2-b1a4558a75d2\",\n  \"interval\": 5,\n  \"verification_uri_complete\": \"https://{yourOktaDomain}/activate?user_code=RGTCFDTL\",\n  \"verification_uri\": \"https://{yourOktaDomain}/activate\",\n  \"expires_in\": 600\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"device",
										"authorize"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_scope\",\n  \"error_description\": \"No scopes were requested.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"device",
										"authorize"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ad deserunt sunt enim",
											"description": "Obtained during either manual client registration or via the Dynamic Client Registration API. It identifies the client and must match the value preregistered in Okta."
										},
										{
											"key": "scope",
											"value": "id occaecat irure",
											"description": "A list of scopes that the client wants included in the access token."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/device/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"device",
										"authorize"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/introspect",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/introspect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"introspect"
							]
						},
						"description": "This endpoint takes an access token, ID token, refresh token, or device secret and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.\n\nBe sure that you are using the `/introspect` endpoint of the same authorization server that you used to create the token.\n\n> **Note:** The `/introspect` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods] for more information. For public clients (such as single-page and mobile apps) that don't have a `client_secret`, you must include the `client_id` as a query parameter when calling the `/introspect` endpoint. Make sure that you aren't passing the Authorization header in the request."
					},
					"response": [
						{
							"name": "Based on the type of token and whether it is active, the returned JSON contains a different set of information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"introspect"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"active\": true,\n  \"token_type\": \"Bearer\",\n  \"scope\": \"openid profile\",\n  \"client_id\": \"a9VpZDRCeFh3Nkk2VdYa\",\n  \"username\": \"john.doe@example.com\",\n  \"exp\": 1451606400,\n  \"iat\": 1451602800,\n  \"sub\": \"john.doe@example.com\",\n  \"aud\": \"https://{yourOktaDomain}\",\n  \"iss\": \"https://{yourOktaDomain}/oauth2/orsmsg0aWLdnF3spV0g3\",\n  \"jti\": \"AT.7P4KlczBYVcWLkxduEuKeZfeiNYkZIC9uGJ28Cc-YaI\",\n  \"uid\": \"00uid4BxXw6I6TV4m0g3\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"introspect"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"The `token` parameter is required.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"introspect"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"laborum commodo qui\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"introspect"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/keys",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/keys?client_id=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"keys"
							],
							"query": [
								{
									"key": "client_id",
									"value": "laborum",
									"description": "The `client_id` of a Client application. Providing this optional parameter will include any public keys associated with the signing keys of the application."
								}
							]
						},
						"description": "Returns a JSON Web Key Set (JWKS) that contains the public keys that can be used to verify the signatures of tokens that you receive from your authorization server.\n\nAny of the two or three keys listed are used to sign tokens. The order of keys in the result doesn't indicate which keys are used.\n\nThese keys can be used to locally validate JWTs returned by Okta. Standard open-source libraries are available for every major language to perform [JWS](https://datatracker.ietf.org/doc/html/rfc7515) signature validation.\n\n> **Note:** The information returned from this endpoint could lag slightly, but will eventually be up-to-date."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/keys?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"keys"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "max-age=3832304, must-revalidate",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"keys\": [\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"iKqiD4cr7FZKm6f05K4r-GQOvjRqjOeFmOho9V7SAXYwCyJluaGBLVvDWO1XlduPLOrsG_Wgs67SOG5qeLPR8T1zDK4bfJAo1TvbwYeTwVSfd_0mzRq8WaVc_2JtEK7J-4Z0MdVm_dJmcMHVfDziCRohSZthN__WM2NwGnbewWnla0wpEsU3QMZ05_OxvbBdQZaDUsNSx46is29eCdYwhkAfFd_cFRq3DixLEYUsRwmOqwABwwDjBTNvgZOomrtD8BRFWSTlwsbrNZtJMYU33wuLO9ynFkZnY6qRKVHr3YToIrqNBXw0RWCheTouQ-snfAB6wcE2WDN3N5z760ejqQ\",\n      \"kid\": \"U5R8cHbGw445Qbq8zVO1PcCpXL8yG6IcovVa3laCoxM\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    },\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"l1hZ_g2sgBE3oHvu34T-5XP18FYJWgtul_nRNg-5xra5ySkaXEOJUDRERUG0HrR42uqf9jYrUTwg9fp-SqqNIdHRaN8EwRSDRsKAwK3HIJ2NJfgmrrO2ABkeyUq6rzHxAumiKv1iLFpSawSIiTEBJERtUCDcjbbqyHVFuivIFgH8L37-XDIDb0XG-R8DOoOHLJPTpsgH-rJeM5w96VIRZInsGC5OGWkFdtgk6OkbvVd7_TXcxLCpWeg1vlbmX-0TmG5yjSj7ek05txcpxIqYu-7FIGT0KKvXge_BOSEUlJpBhLKU28OtsOnmc3NLIGXB-GeDiUZiBYQdPR-myB4ZoQ\",\n      \"kid\": \"Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    },\n    {\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"n\": \"lC4ehVB6W0OCtNPnz8udYH9Ao83B6EKnHA5eTcMOap_lQZ-nKtS1lZwBj4wXRVc1XmS0d2OQFA1VMQ-dHLDE3CiGfsGqWbaiZFdW7UGLO1nAwfDdH6xp3xwpKOMewDXbAHJlXdYYAe2ap-CE9c5WLTUBU6JROuWcorHCNJisj1aExyiY5t3JQQVGpBz2oUIHo7NRzQoKimvpdMvMzcYnTlk1dhlG11b1GTkBclprm1BmOP7Ltjd7aEumOJWS67nKcAZzl48Zyg5KtV11V9F9dkGt25qHauqFKL7w3wu-DYhT0hmyFcwn-tXS6e6HQbfHhR_MQxysLtDGOk2ViWv8AQ\",\n      \"kid\": \"h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU\",\n      \"kty\": \"RSA\",\n      \"use\": \"sig\"\n    }\n  ]\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/keys?client_id=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"keys"
									],
									"query": [
										{
											"key": "client_id",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/logout",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/logout?id_token_hint=laborum&post_logout_redirect_uri=laborum&state=laborum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"logout"
							],
							"query": [
								{
									"key": "id_token_hint",
									"value": "laborum",
									"description": "(Required) A valid ID token with a subject that matches the current session."
								},
								{
									"key": "post_logout_redirect_uri",
									"value": "laborum",
									"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "state",
									"value": "laborum",
									"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow"
								}
							]
						},
						"description": "Use this operation to sign a user out by removing their Okta browser session.\n\nThis endpoint takes an ID token and logs the user out of Okta if the subject matches the current Okta session. A `post_logout_redirect_uri` may be specified to redirect the browser after the logout is performed. Otherwise, the browser is redirected to the Okta sign-in page. See [Sign users](https://developer.okta.com/docs/guides/sign-users-out/) out for more information.\n\nIf no Okta session exists, this endpoint has no effect and the browser is redirected immediately to the Okta sign-in page or the `post_logout_redirect_uri` (if specified).\n\n> **Note:** When making requests to the `/logout` endpoint, the browser (user agent) should be redirected to the endpoint. You can't use AJAX with this endpoint. We may load an interstitial to do client-side logic before redirecting to the `post_logout_redirect_uri`, or login page if no redirect is provided."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/logout?id_token_hint=laborum&post_logout_redirect_uri=laborum&state=laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"logout"
									],
									"query": [
										{
											"key": "id_token_hint",
											"value": "laborum"
										},
										{
											"key": "post_logout_redirect_uri",
											"value": "laborum"
										},
										{
											"key": "state",
											"value": "laborum"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/logout",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id_token_hint",
									"value": "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwiZW1haWxfJhaW4ub2t0YTEuY29tO.....jE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGV3RGZWUiIsImF1dGhfdGltZSI6MTQ0OTYyNDAyNiwiYXRfaGFzaCI6ImNwcUtmZFFBNWVIODkxRmY1b0pyX1EifQ.Btw6bUbZhRa89DsBb8KmL9rfhku--_mbNC2pmF45Pn3u_6KKwxJnxcWxLvMuuisnvIs7NScKpOAab6ayZU0VL8W6XAijQmnYTtMWQfSuaaR8rYOaWHrffh3OypvDdrQuYacbkT0csxdrayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg",
									"description": "A valid ID token with a subject that matches the current session"
								},
								{
									"key": "post_logout_redirect_uri",
									"value": "https://www.example.com/oauth2/postLogoutRedirectUri",
									"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
								},
								{
									"key": "state",
									"value": "1230000",
									"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"logout"
							]
						},
						"description": "Use this operation to sign a user out by removing their Okta browser session. This is the recommended method over GET as you can wrap the parameters in the request body.\n\nThis endpoint uses the ID token to verify that the subject matches the current Okta session, and then signs the user out. You can specify a `post_logout_redirect_uri` to redirect the browser after the user signs out. Otherwise, the browser is redirected to the Okta sign-in page. See [Sign users out](https://developer.okta.com/docs/guides/sign-users-out/).\n\nIf no Okta session exists, this endpoint has no effect and the browser is redirected immediately to the Okta sign-in page or the `post_logout_redirect_uri` (if specified).\n\n> **Note:** When making requests to the `/logout` endpoint, the browser (user agent) should be redirected to the endpoint. You need to make a POST request from a form. A POST request to this endpoint from the backend doesn't completely terminate the session."
					},
					"response": [
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token_hint",
											"value": "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwiZW1haWxfJhaW4ub2t0YTEuY29tO.....jE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGV3RGZWUiIsImF1dGhfdGltZSI6MTQ0OTYyNDAyNiwiYXRfaGFzaCI6ImNwcUtmZFFBNWVIODkxRmY1b0pyX1EifQ.Btw6bUbZhRa89DsBb8KmL9rfhku--_mbNC2pmF45Pn3u_6KKwxJnxcWxLvMuuisnvIs7NScKpOAab6ayZU0VL8W6XAijQmnYTtMWQfSuaaR8rYOaWHrffh3OypvDdrQuYacbkT0csxdrayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg",
											"description": "A valid ID token with a subject that matches the current session"
										},
										{
											"key": "post_logout_redirect_uri",
											"value": "https://www.example.com/oauth2/postLogoutRedirectUri",
											"description": "Location to redirect to after the logout is performed. It must match the value preregistered in Okta during client registration."
										},
										{
											"key": "state",
											"value": "1230000",
											"description": "An optional value that is returned as a query parameter during the redirect at the end of the flow."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"logout"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/oob-authenticate",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login_hint",
									"value": "testuser@example.com",
									"description": "(Required) The user sign-in information for whom authentication is being requested"
								},
								{
									"key": "channel_hint",
									"value": "push",
									"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"oob-authenticate"
							]
						},
						"description": "Initiates direct authentication with an out-of-band authenticator\n\n> **Note:** The `/oob-authenticate` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/)."
					},
					"response": [
						{
							"name": "Out-of-band authentication has successfully been initiated.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"oob-authenticate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"oob_code\": \"ftOpMH6ohWMGWoH1vgrX-lNX6tnXE6JNd9\",\n  \"channel\": \"push\",\n  \"binding_method\": \"none\",\n  \"expires_in\": 300,\n  \"interval\": 5\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"oob-authenticate"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"'foo' is not supported as a 'channel_hint'. Try again with another value.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"oob-authenticate"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client secret supplied for a confidential client is invalid.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"oob-authenticate"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"The required authenticator cannot be used. Check if it is required by policy and the user is enrolled in the authenticator and try again.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login_hint",
											"value": "testuser@example.com",
											"description": "(Required) The user sign-in information for whom authentication is being requested"
										},
										{
											"key": "channel_hint",
											"value": "push",
											"description": "(Required) The out-of-band channel for use with authentication. Required for all `/oob-authenticate` requests and any `/challenge` request with an out-of-band authenticator."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/oob-authenticate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"oob-authenticate"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"API call exceeded rate limit due to too many requests.\"\n}"
						}
					]
				},
				{
					"name": "/par",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "example.okta.com"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/par",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"par"
							]
						},
						"description": "Use this operation to request the permitted communication options for the `/par` operation.\n\n> **Note:** CORS is enforced on a per-client basis. This endpoint always returns CORS headers with the current Origin."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "example.okta.com",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST",
									"description": ""
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "tempor qui dolor consectet",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Origin",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/par",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/par",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"par"
							]
						},
						"description": "The pushed authorization request endpoint (`/par`) promotes OAuth security by allowing the authorization server to authenticate the client before any user interaction happens. The increased confidence in the client's identity during the authorization process means the authorization server can refuse illegitimate requests much earlier in the process. This process prevents attempts to spoof clients or otherwise tamper with or misuse an authorization request and provides a simple way to make a confidential and integrity-protected authorization request.\n\nThe `/par` endpoint allows an OAuth 2.0 client to push the payload of an authorization request directly to the authorization server. The authorization server provides a request URI value in the response. The request URI is a reference to the authorization request payload data in a subsequent call to the `/authorize` endpoint through a user agent."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"request_uri\": \"urn:okta:Y1hIQ3ZqYjFodEZMOVJ3TUF4ZHRPZjJuNFZRV2ZWQ044MmFoX2VIT2oyNDo\",\n  \"expires_in\": 3600\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_scope\",\n  \"error_description\": \"No scopes were requested.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Invalid value for client_id' parameter.\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"access_denied\",\n  \"error_description\": \"Requests for ID tokens or access tokens with OpenID scopes require the 'openid' scope.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"nulla commodo deserunt\",\n  \"code_challenge\": \"do exercitation\",\n  \"code_challenge_method\": \"incididunt ex magna\",\n  \"display\": \"velit irure\",\n  \"idp\": \"tempor veniam\",\n  \"idp_scope\": \"aute consectetur labore\",\n  \"login_hint\": \"consectetur deserunt ipsum\",\n  \"max_age\": 25932227,\n  \"nonce\": \"in minim\",\n  \"prompt\": \"mollit consequat\",\n  \"redirect_uri\": \"ut volup\",\n  \"request\": \"labore commodo do in\",\n  \"response_mode\": \"incididunt ipsum labore eiusmod\",\n  \"response_type\": \"aute non dolor veniam\",\n  \"scope\": \"do cillum Lorem\",\n  \"sessionToken\": \"commodo ea\",\n  \"state\": \"in sint aliqua\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/par",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"par"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/revoke",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/revoke",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"revoke"
							]
						},
						"description": "The API takes an access or refresh token and revokes it. Revoked tokens are considered inactive at the introspection endpoint. A client may only revoke its own tokens. See [Revoke tokens](https://developer.okta.com/docs/guides/revoke-tokens/) for more information.\n\n> **Note:** The `/revoke` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "A successful revocation is denoted by an HTTP 200 OK response. Note that revoking an invalid, expired, or revoked token is still considered a success so as to not leak information.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"revoke"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"revoke"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_request\",\n  \"error_description\": \"The `token` parameter is required.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"revoke"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"dolore do cillum culpa\",\n  \"token_type_hint\": \"refresh_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"revoke"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/token",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "example.okta.com"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"token"
							]
						},
						"description": "Use this operation to request the permitted communication options for the `/token` operation.\n\n> **Note:** CORS is enforced on a per-client basis. This endpoint will always return CORS headers with the current Origin."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "example.okta.com",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "POST",
									"description": ""
								},
								{
									"key": "Access-Control-Max-Age",
									"value": "tempor qui dolor consectet",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Origin",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Origin",
										"value": "example.okta.com"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/token",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{basicAuthUsername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{basicAuthPassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "0jrabyQWm4B9zVJPbotY"
								},
								{
									"key": "client_secret",
									"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
								},
								{
									"key": "redirect_uri",
									"value": "https://www.example.com/oauth2/redirectUri"
								},
								{
									"key": "code",
									"value": "QnowT-aeawtOJKp-MtkH&"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"token"
							]
						},
						"description": "This endpoint returns access tokens, ID tokens, and refresh tokens depending on the request parameters. For password, client credentials, saml2 assertion, and refresh token flows, calling `/token` is the only step of the flow. For the authorization code flow, calling `/token` is the second step of the flow.\n\n> **Note:** The `/token` endpoint requires client authentication. The method is configured per client application. See [Client authentication methods](/openapi/okta-oauth/guides/client-auth/) for more information."
					},
					"response": [
						{
							"name": "Based on the scopes requested. Generally speaking, the scopes specified in a request are included in the access token in the response.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiJ9.eyJ2ZXIiOjEsImlzcyI6Imh0dHA6Ly9yYWluLm9rdGExLmNvbToxODAyIiwiaWF0IjoxNDQ5NjI0MDI2LCJleHAiOjE0NDk2Mjc2MjYsImp0aSI6IlVmU0lURzZCVVNfdHA3N21BTjJxIiwic2NvcGVzIjpbIm9wZW5pZCIsImVtYWlsIl0sImNsaWVudF9pZCI6InVBYXVub2ZXa2FESnh1a0NGZUJ4IiwidXNlcl9pZCI6IjAwdWlkNEJ4WHc2STZUVjRtMGczIn0.HaBu5oQxdVCIvea88HPgr2O5evqZlCT4UXH4UKhJnZ5px-ArNRqwhxXWhHJisslswjPpMkx1IgrudQIjzGYbtLFjrrg2ueiU5-YfmKuJuD6O2yPWGTsV7X6i7ABT6P-t8PRz_RNbk-U1GXWIEkNnEWbPqYDAm_Ofh7iW0Y8WDA5ez1jbtMvd-oXMvJLctRiACrTMLJQ2e5HkbUFxgXQ_rFPNHJbNSUBDLqdi2rg_ND64DLRlXRY7hupNsvWGo0gF4WEUk8IZeaLjKw8UoIs-ETEwJlAMcvkhoVVOsN5dPAaEKvbyvPC1hUGXb4uuThlwdD3ECJrtwgKqLqcWonNtiw\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"openid email offline_access\",\n  \"refresh_token\": \"a9VpZDRCeFh3Nkk2VdY\",\n  \"id_token\": \"eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwMHVpZDRCeFh3Nkk2VFY0bTBnMyIsImVtYWlsIjoid2VibWFzdGVyQGNsb3VkaXR1ZGUubmV0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInZlciI6MSwiaXNzIjoiaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIiLCJsb2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGV3RGZWUiIsImF1dGhfdGltZSI6MTQ0OTYyNDAyNiwiYXRfaGFzaCI6ImNwcUtmZFFBNWVIODkxRmY1b0pyX1EifQ.Btw6bUbZhRa89DsBb8KmL9rfhku--_mbNC2pgC8yu8obJnwO12nFBepui9KzbpJhGM91PqJwi_AylE6rp-ehamfnUAO4JL14PkemF45Pn3u_6KKwxJnxcWxLvMuuisnvIs7NScKpOAab6ayZU0VL8W6XAijQmnYTtMWQfSuaaR8rYOaWHrffh3OypvDdrQuYacbkT0csxdrayXfBG3UF5-ZAlhfch1fhFT3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M8BM75celdy3jkpOurg\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_grant\",\n  \"error_description\": \"The authorization code is invalid or has expired.\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"No client credentials found.\"\n}"
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "0jrabyQWm4B9zVJPbotY"
										},
										{
											"key": "client_secret",
											"value": "6W7XvLCrs4ByKn7Ucwh8ygeeXRhdGFdVOTp75eOc"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Determines the mechanism Okta uses to authorize the creation of the tokens."
										},
										{
											"key": "redirect_uri",
											"value": "https://www.example.com/oauth2/redirectUri"
										},
										{
											"key": "code",
											"value": "QnowT-aeawtOJKp-MtkH&"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"token"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				},
				{
					"name": "/userinfo",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "address device_sso email groups offline_access okta.clients.manage okta.clients.read okta.clients.register okta.universalLogout.manage okta.workflows.invoke.manage openid phone profile",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "/oauth2/v1/token",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "/oauth2/v1/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth2/v1/userinfo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"v1",
								"userinfo"
							]
						},
						"description": "Returns information about the user that is the subject of the access token. Many of these claims are also included in the [ID token](https://developer.okta.com/docs/reference/api/oidc/#id-token), but calling this endpoint always returns all of the user's claims. The ID token can be configured to include a subset of the user's claims. See [Scope-dependent claims](https://developer.okta.com/docs/reference/api/oidc/#scope-dependent-claims-not-always-returned) for more information."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"userinfo"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"sub\": \"00uid4BxXw6I6TV4m0g3\",\n  \"name\": \"John Doe\",\n  \"nickname\": \"Jimmy\",\n  \"given_name\": \"John\",\n  \"middle_name\": \"James\",\n  \"family_name\": \"Doe\",\n  \"profile\": \"https://example.com/john.doe\",\n  \"zoneinfo\": \"America/Los_Angeles\",\n  \"locale\": \"en-US\",\n  \"updated_at\": 1311280970,\n  \"email\": \"john.doe@example.com\",\n  \"email_verified\": true,\n  \"address\": {\n    \"street_address\": \"123 Hollywood Blvd.\",\n    \"locality\": \"Los Angeles\",\n    \"region\": \"CA\",\n    \"postal_code\": \"90210\",\n    \"country\": \"US\"\n  },\n  \"phone_number\": \"+1 (425) 555-1212\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"userinfo"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "WWW-Authenticate",
									"value": "Bearer error=\"invalid_token\", error_description=\"The access token is invalid\"",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"userinfo"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "WWW-Authenticate",
									"value": "Bearer error=\"insufficient_scope\", error_description=\"The access token must provide access to at least one of these scopes - profile, email, address or phone\"",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth2/v1/userinfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"v1",
										"userinfo"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errorCode\": \"E0000047\",\n  \"errorSummary\": \"You exceeded the maximum number of requests. Try again in a while.\",\n  \"errorLink\": \"E0000047\",\n  \"errorId\": \"sampleQPivGUj_ND5v78vbYWW\",\n  \"errorCauses\": []\n}"
						}
					]
				}
			],
			"description": "Every Okta org comes with a built-in authorization server called the Org Authorization Server. You use the Org Authorization Server to perform SSO with Okta for your OpenID Connect apps or to get an access token for the Okta APIs. You can't customize this authorization server with regards to audience, claims, policies, or scopes. Additionally, the resulting access token's issuer is `https://{yourOktaDomain}`, which indicates that only Okta can consume or validate it. The access token can't be used or validated by your own applications."
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "state",
				"value": "86320d049db5c20e0b789435e49924c901455fca",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "okta.clients.register",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{clientSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{clientId}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{baseUrl}}/oauth2/v1/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{baseUrl}}/oauth2/v1/authorize",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "tokenName",
				"value": "New Access Token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "yourOktaDomain",
			"value": "subdomain.okta.com"
		},
		{
			"key": "baseUrl",
			"value": "https://{{yourOktaDomain}}"
		},
		{
			"key": "clientId",
			"value": ""
		},
		{
			"key": "clientSecret",
			"value": ""
		},
		{
			"key": "apiToken",
			"value": ""
		}
	]
}